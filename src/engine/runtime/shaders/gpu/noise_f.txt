vec2	ref_uv = %in.fragcoord%.xy * u_ibs;
vec4	ref = texture2D(u_tex, ref_uv);

vec2	noise_uv = %in.fragcoord%.xy / 128.0;
vec4	noise_a = texture2D(u_noise, noise_uv + vec2(u_random.x * 3.456, u_random.x * 7.145)),
		noise_b = texture2D(u_noise, noise_uv + vec2(u_random.y * 2.789, u_random.y * 9.781));

vec4	noise = noise_a.r > 0.5 ? noise_b.barg : noise_a.rgba;
noise = mix(noise, noise.rrrr, u_mono);

//--
float	strength = u_strength * 6.0;
float	luma = dot(ref.rgb, vec3(0.299, 0.587, 0.114));

if	(u_bias < 0.5)
	strength *= pow(clamp(1.0 + luma * (u_bias - 0.5) * 2.0, 0.0, 1.0), 5.0);
if	(u_bias > 0.5)
	strength *= pow(clamp(1.0 - (1.0 - luma) * (u_bias - 0.5) * 2.0, 0.0, 1.0), 5.0);
	
vec4 fcol = vec4(ref.rgb * (1.0 + (noise.rgb - 0.5) * strength * 2.0), ref.a);

float x = (fcol.x * fcol.x * (3.0 - 2.0 * fcol.x)) * (1.0 - luma) + fcol.x * luma;
fcol.x = (x + fcol.x) * 0.5;

/*
float z = mix(pow(fcol.z, 1.15), fcol.z, luma);
fcol.z = z;
*/
	

vec3 _K = vec3(0.706563656163571438,
              0.492221995910824922,
              -0.19878565207439636);
vec3 _p = vec3(1.0, fcol.z, fcol.z * fcol.z);
 
float z = fcol.z * (dot(_K, _p) * (1.0 - luma) + luma);
fcol.z = z;


%out.color% = fcol;